account/login
method: post
	Request{
          'username': str (Required)
          'password': str (Required)
	}
	Response{
	  'token': '<auth-token>'
	}
account/register
method: post
Serializer: AuthAccountSerializer
	Reques{
	  'first_name': str (Required)
	  'last_name': str (Required)
	  'username': str (Required)
	  'password': str (Required)
	}
	Response{
	  'token': '<auth-token>'
	}
account/me
method: get
Serializer: AccountSerializer
	Request{
		token: required
	}
	Response{
	email: str,
	username: str,
	professor: {} 
	created : Date,
	updated: Date,
	first_name : str
	last_name: str,
	.......
	}
method: put
	Request{
		token: required
	}
	Response{
	'username': Optional
	'first_name': Optional
	'mid_name': Optional
	'last_name': Optional
	'gender'： Optional
	'birthday': Optional
	'school_year': Optional
	'major':Optional
	}
account/change_password
method: post
	Request{
	'old-password'(str): required,
	'password'(str): required
	}
	Response{
	case 1: header{Status code 400} 
	case 2: header{Status code 400} 
		body {
		'ERROR': 'Password not match'
		}
	}
account/retrieve
method: get
	Request{
                email: required
        	verification: required
	}
	Response{
                header{
			status code 201
		}
		body{
                	'token': '<auth-token>'
		}
	}
account/destroy
method: delete
	Request{
                self.queryset: required
	}
	Response{
                case (self.queryset is fulfilled):
                        status 200
	case (self.queryset is not fulfilled):
                status 403
	}
account/friends
method: get
Serializer: BasicAccountSerializer
	Request{
                user
 	       request user
	}
	Response{
                'pk'
		'id'
		'avatar'
		'username'
		'email'
		'full_name'
		'about_me'
		'level'
	}//error msg: cannot add yourself
method: post
	Request{
                user
	        request user
	}
	Response{
                case (request.user.pk= int(pk)):
                        header{status 403}
                body{
			'cant add yourself as your friend'
		}
        case (new_friend in request.user.friends.all()):
                        header{status 403}
                body{
                                'Already friended'
                }
        case(request.user in new_friend.pending_friends.all()):
		header{status 403}
                body{
                                'Already sent the request'
                }
        case(no error):
		status 200
	}
method: put
	Request{
                user
	}
	Response{
                case (request.user.pk= int(pk)):
                        header{status 403}
	                body{
				'cant add yourself as your friend'
			}
	        case(request.user.pk is not in request.user.pending_friends.all()):
                        'No friend request found'
		case(no error):
			status 200
	}
method: delete
	Request{
                user
        	request user
	}
	Response{
                status 200
	}
account/pending_friends
method: get
Serializer: BasicAccountSerializer
	Request{
		user
	}
	Response{
		'pk'
		'id'
		'avatar'
		'username'
		'email'
		'full_name'
		'about_me'
		'level'
	}
account/classrooms
method: get
Serializer: BasicAccountSerializer
	Request{
		token: required
	}
	Response{
		'id', 
		'class_code', 
		'class_short', 
		'students_count',
		'class_section', 
		'description', 
		'class_time', 
		'semester', 
		'professors', 
		'folders'
	}
method: post
	Request{
		user
		classroom
	}
	Response{
		status 200
	}
method: delete
	Request{
		user
		classroom
	}
	Response{
		status 200
	}
account/rooms
method: get
Serializer: RoomSerializer
	Request{
		user
		room
	}
	Response{
		'__all__'
	}
method: post
	Request{
                user
        	room
	}
	Response{
                status 200
	}
method: delete
	Request{
                user
        	room
	}
	Response{
                status 200
	}
account/notes
method: get
Serializer: NoteSerializer
	Request{
                user
	}
	Response{
	}
account/moments
method: get
Serializer: MomentSerializer
	Request{
		
	}
	Response{
	}


method: post
	Request{
                'content' | 'question': required
        	'classroom_id':  optional
        	'file': optional
	}
	Response{
		case(content & question both missing):
			status 400
		case(image error):
			header{
		       		status 400
			}
			body{
				'invalid image!'
			}
		case(success):
			status 200
		} 
method: put
	Request{
		user pk: required
	}
	Response{
		status 200
	}
method: delete
	Request{
		user pk: required
	}
	Response{
		status 200
	}
account/tasks
method: get
Serializer: TaskSerializer
	Request{
	}
	Response{
	}
method: put
	Request{
	}
	Response{
		status 201
	}
method: post
Serializer: TaskSerializer
	Request{
	}
	Response{
		status 200
	}
method: delete
	Request{
	}
	Response{
		status 200
	}
account/freetime
	method: get
	Request{
	}
	Response{
		status 200
	}
account/update
method: get
	Request{
		first_name'| 'last_name'| 'email'| 'office'| 'major'
	}
	Response{
		status 200
	}
account/comments
method: get
	Request{
		pk
	}
	Response{
		
	}
method: post
	Request{
		pk
	}
	Response{
		status 201
	}
